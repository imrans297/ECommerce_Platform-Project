name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: ecommerce-platform-dev-eks
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, product-service, order-service, notification-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js (for user-service)
      if: matrix.service == 'user-service'
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: applications/user-service/package-lock.json

    - name: Setup Python (for product-service)
      if: matrix.service == 'product-service'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: applications/product-service/requirements.txt

    - name: Setup Java (for order-service)
      if: matrix.service == 'order-service'
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Setup Go (for notification-service)
      if: matrix.service == 'notification-service'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: applications/notification-service/go.sum

    - name: Install dependencies and run tests
      run: |
        cd applications/${{ matrix.service }}
        case "${{ matrix.service }}" in
          "user-service")
            npm ci
            npm run test
            npm run lint
            ;;
          "product-service")
            pip install -r requirements.txt
            python -m pytest tests/ -v --cov=app
            ;;
          "order-service")
            mvn clean test
            mvn jacoco:report
            ;;
          "notification-service")
            go mod download
            go test -v ./...
            go vet ./...
            ;;
        esac

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: applications/${{ matrix.service }}

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [user-service, product-service, order-service, notification-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd applications/${{ matrix.service }}
        docker build -t $ECR_REGISTRY/${{ matrix.service }}:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/${{ matrix.service }}:$IMAGE_TAG $ECR_REGISTRY/${{ matrix.service }}:latest
        docker push $ECR_REGISTRY/${{ matrix.service }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ matrix.service }}:latest

    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-image-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Deploy to EKS
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: user-service:latest|image: ${{ env.ECR_REGISTRY }}/user-service:$IMAGE_TAG|g" kubernetes/manifests/user-service.yaml
        sed -i "s|image: product-service:latest|image: ${{ env.ECR_REGISTRY }}/product-service:$IMAGE_TAG|g" kubernetes/manifests/product-service.yaml
        sed -i "s|image: order-service:latest|image: ${{ env.ECR_REGISTRY }}/order-service:$IMAGE_TAG|g" kubernetes/manifests/order-service.yaml
        sed -i "s|image: notification-service:latest|image: ${{ env.ECR_REGISTRY }}/notification-service:$IMAGE_TAG|g" kubernetes/manifests/notification-service.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f kubernetes/manifests/
        
        # Wait for rollout to complete
        kubectl rollout status deployment/user-service
        kubectl rollout status deployment/product-service
        kubectl rollout status deployment/order-service
        kubectl rollout status deployment/notification-service

    - name: Verify deployment
      run: |
        kubectl get pods
        kubectl get services
        
        # Run smoke tests
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://user-service:3000/health
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://product-service:5000/health
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://order-service:8080/actuator/health
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://notification-service:9000/health

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}